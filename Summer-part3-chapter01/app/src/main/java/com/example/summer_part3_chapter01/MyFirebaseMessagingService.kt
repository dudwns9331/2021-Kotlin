package com.example.summer_part3_chapter01

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage


/**
 * https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages/send?apix=true
 * Îã§Ïùå ÎßÅÌÅ¨Ïùò API Î•º Ìò∏Ï∂úÌï¥Ï£ºÎäî ÏÑúÎπÑÏä§Î•º ÌÜµÌï¥ÏÑú Íµ¨ÌòÑÌïúÎã§.
 * Ìò∏Ï∂úÎêòÎäî Î©îÏãúÏßÄÎäî onMessageReceived ÏóêÏÑú Ï≤òÎ¶¨ÌïòÎèÑÎ°ù ÌïúÎã§.
 *
 * ÏïàÎìúÎ°úÏù¥Îìú 8.0 Ïù¥ÏÉÅÏóêÏÑúÎäî ÏïåÎ¶º Ï±ÑÎÑêÏùÑ ÎßåÎì§Ïñ¥Ïïº ÌïúÎã§.
 * Ï±ÑÎÑêÏùÄ Î©îÏãúÏßÄÎ•º Î∞úÏÜ°ÌïòÍ∏∞ Ï†ÑÏóê ÎßåÎì§Ïñ¥Ï†∏Ïïº ÌïúÎã§.
 *
 */

class MyFirebaseMessagingService : FirebaseMessagingService() {

    /* ÌÜ†ÌÅ∞Ïù¥ Ìï≠ÏÉÅ Î∞îÎÄî Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê ÌÜ†ÌÅ∞Ïù¥ Í∞±Ïã†Îê† ÎïåÎßàÎã§ ÏÑúÎ≤ÑÏóê Í∞±Ïã†ÌïòÎäî ÏûëÏóÖÏùÑ ÌïúÎã§.*/
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    /* Î©îÏÑ∏ÏßÄÎ•º ÏàòÏã†Ìï† ÎïåÎßàÎã§ ÎèôÏûëÌïúÎã§. Î©îÏÑ∏ÏßÄÏóê ÎåÄÌïú Ï≤òÎ¶¨Î•º ÌïúÎã§.*/
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)
        createNotificationChannel()

        val type = remoteMessage.data["type"]
            ?.let { NotificationType.valueOf(it) }
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]

        type ?: return

        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))

    }


    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel =
                NotificationChannel(
                    CHANNEL_ID,
                    CHANNEL_NAME,
                    NotificationManager.IMPORTANCE_DEFAULT
                )
            channel.description = CHANNEL_DESCRIPTION
            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)

        }

    }

    private fun createNotification(
        type: NotificationType,
        title: String?,
        message: String?
    ): Notification {

        val intent = Intent(this, MainActivity::class.java)
            .apply {
                putExtra("notificationType", "${type.title} ÌÉÄÏûÖ")
                addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            }

        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, FLAG_UPDATE_CURRENT)


        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_baseline_notifications_24)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)

        when (type) {
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                notificationBuilder.setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText(
                            "üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜ" +
                                    "üòâüòäüòãüòéüòçüòòü•∞üòó" +
                                    "üòôüòö‚ò∫üôÇü§óü§©ü§îü§®" +
                                    "üòêüòëüò∂üôÑüòèüò£üò•üòÆ"
                        )
                )
            }
            NotificationType.CUSTOM -> {
                notificationBuilder
                    .setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(
                            packageName,
                            R.layout.view_custom_notification
                        ).apply {
                            setTextViewText(R.id.title, title)
                            setTextViewText(R.id.message, message)
                        }
                    )
            }
        }

        return notificationBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji Party Î•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }


}